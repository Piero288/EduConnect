services:
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "5000:5000"
    env_file:
      - ./api-gateway/.env
    depends_on:
      - auth-service
    environment:
      AUTH_URL: http://auth-service:9050
  auth-service:
    build: ./auth-service
    container_name: auth-service
    ports:
      - "9050:9050"
    env_file:
      - ./auth-service/.env
  
  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "9051:9051"
    env_file:
      - ./user-service/.env
    depends_on:
      mysql-userdb:
        condition: service_healthy
    volumes:
      - ./user-service/logs:/userservice/logs
    restart: always

  mysql-userdb:
    image: mysql:8.0
    container_name: mysql-userdb
    restart: always
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_USERSERVICE_DB}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_user_data:/var/lib/mysql
      - ./user-service/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  course-service:
    build: ./course-service
    container_name: course-service
    ports:
      - "9052:9052"
    env_file:
      - ./course-service/.env
    depends_on:
      mysql-coursedb:
        condition: service_healthy
    volumes:
      - ./course-service/logs:/courseservice/logs
    restart: always

  mysql-coursedb:
    image: mysql:8.0
    container_name: mysql-coursedb
    restart: always
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_COURSESERVICE_DB}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_course_data:/var/lib/mysql
      - ./course-service/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka0:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka0
    hostname: kafka0
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      #KAFKA_PROCESS_ROLES: broker
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INTERNAL://kafka0:9092,LISTENER_EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CREATE_TOPICS: >
        course-lingua_inglese:1:1,
        course-lingua_francese:1:1,
        course-machine_learning:1:1,
        course-data_science:1:1,
        course-python_base:1:1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - default
  publisher-service:
    build: ./publisher-service
    container_name: publisher-service
    ports:
      - "5004:5004"
    depends_on:
      kafka0:
        condition: service_healthy
    env_file:
      - ./publisher-service/.env
    volumes:
      - ./publisher-service/logs:/publisherservice/logs
    restart: always

volumes:
  mysql_user_data:
  mysql_course_data: